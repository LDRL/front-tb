import { useState, useEffect, useCallback, useRef } from 'react';
// import { fetchProductList, productUrl } from "../../services/product";
// import { Product, ProductList } from '../../models';
import { PaginationModel, pageSize } from '@/utils';
import { ProductList, fetchProductList, productUrl } from '@/pages/product';
import { useSelector } from 'react-redux';

export const useProducts = (initialPage: number = 1) => {
    const search = useSelector((state:any) => state.product.search);

    const [products, setProducts] = useState<ProductList>([]);
    const [totalProduct, setTotal] = useState<number>(0);
    const [page, setPage] = useState<number>(initialPage);
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [error, setError] = useState<Error | null>(null);

    const previousSearch = useRef(search)

    const [paginationModel, setPaginationModel] = useState<PaginationModel>({
        page: initialPage - 1,
        pageSize: pageSize,
    });

    const getProducts = useCallback(async () => {

        if(search)
            if(search === previousSearch.current) return
        
        try {
            setIsLoading(true);
            previousSearch.current  = search
            const [err, data, total] = await fetchProductList(productUrl, page, search);

            console.log(data, "data ---")
            if (err) {
                setError(err);
            } else {
                setProducts(data || []);
                setTotal(total || 0);
            }
        } catch (error) {
            setError(error as Error);
        } finally {
            setIsLoading(false);
        }
    }, [page,search]);

    useEffect(() => {
        getProducts();
    }, [getProducts]);

    const handlePaginationModelChange = (newPaginationModel: PaginationModel) => {
        setPaginationModel(newPaginationModel);
        const newPage = newPaginationModel.page + 1;
        setPage(newPage);
    };

    return {
        products,
        totalProduct,
        isLoading,
        error,
        paginationModel,
        handlePaginationModelChange,
    };
};